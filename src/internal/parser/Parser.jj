/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(Parser)package internal.parser;

import internal.parser.containers.*;
import internal.parser.containers.pattern.*;
import internal.parser.containers.condition.*;
import internal.parser.containers.condition.BaseCondition.ConditionType;
import internal.parser.containers.query.*;
import internal.parser.containers.property.*;
import internal.parser.containers.expr.*;
import internal.parser.containers.expr.AggExpr.AggType;
import internal.parser.containers.property.PropertyDef.RandomSpec;

public class Parser{}PARSER_END(Parser)SKIP :{    " "|   "\r"|   "\t"|   "\n"
|   ";"}
TOKEN [IGNORE_CASE] : /* KEYWORDS */
{    < FOR		: "FOR" >
|   < ALL		: "ALL" >
|   < AGGREGATE	: "AGGREGATE" >
|   < ASSERT	: "ASSERT" >
|   < AT		: "AT" >
|   < WHERE		: "WHERE" >
|   < FROM		: "FROM" >
|   < UNIFORM	: "UNIFORM" >
|   < INT		: "INT" >
|   < FLOAT		: "FLOAT" >
|   < UNION		: "UNION" >
|   < AND		: "AND" >
|   < OR		: "OR" >
|   < NOT		: "NOT" >
|   < DEFINE	: "DEFINE" >
|   < AS		: "AS" >
|   < INHERIT	: "INHERIT" >
|   < IN		: "IN" >
|   < TO		: "TO" >
|   < TRUE		: "TRUE" >
|   < FALSE		: "FALSE" >
|   < MAX		: "MAX" >
|   < MIN		: "MIN" >
|   < COUNT		: "COUNT" >
|   < SUM		: "SUM" >
|   < CASE		: "CASE" >
|   < WHEN		: "WHEN" >
|   < THEN		: "THEN" >
|   < ELSE		: "ELSE" >
|   < RANDOM	: "RANDOM" >
|   < WORD		: [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_"])* >
|   < CONSTANT 	: (< DIGIT >)+ >
|   < #DIGIT 	: [ "0"-"9" ] >
|   < COMMA		: "," >
|   < PLUS 		: "+" >
|   < MINUS 	: "-" >
|   < MULTIPLY	: "*" >
|   < GE		: ">=" >
|   < LE		: "<=" >
|   < GT		: ">" >
|   < LT		: "<" >
|   < EQ		: "=" >
|   < NOTEQ		: ("!=" | "<>") >
|   < DIVIDE 	: "/" >
|   < LPARANS	: "(" >
|   < RPARANS	: ")" >
|   < DOT		: "." >
}

IPattern pattern() :
{
    IPattern pattern = null, subPattern = null;}
{
    LOOKAHEAD(412421) pattern = basePattern() < COMMA > subPattern = pattern() { return new Pattern(pattern, subPattern); }
|   pattern = basePattern() { return pattern; }}

BasePattern basePattern() :
{
    Reference r1 = null, r2 = null;
    Relation relation = null;}
{    LOOKAHEAD(2) r1 = reference() relation = relation() r2 = reference() { return new BasePattern(r1, relation, r2); }
|   r1 = reference() { return new BasePattern(r1, null, null); }}

BaseQuery baseQuery() :
{
    String level = null;
    IPattern pattern = null;
    ICondition condition = null;
}
{    level = word() pattern = pattern() (< WHERE > condition = condition())? { return new BaseQuery(level, pattern, condition); }}Relation relation() :
{
    Relation relation = null;
    String name = null, regex = null;
}
{
    LOOKAHEAD(2) name = word()
    (        < MULTIPLY >    |   < PLUS >
    )
    {
        regex = token.image;
        return new Relation(name, regex);
    }
|   < LPARANS > relation = relation() < RPARANS > { return relation; }

|   name = word() { return new Relation(name, null); }
}

ICondition condition() :
{
    Property property = null;
    UnionType unionType = null;
    ICondition condition = null, subCondition = null;
    TokenCmpOp op = null;
    String value = null;
}
{
    LOOKAHEAD(12) condition = baseCondition()
    	(< AND > | < OR >) { unionType = UnionType.getType(token.image); }
    	subCondition = condition() 					{ return new Condition(condition, unionType, subCondition); }
    	
|   condition = baseCondition() 					{ return condition; }

|   < LPARANS > condition = condition() < RPARANS >	{ return condition; }
}

ICondition baseCondition() :
{
    Property property 		= null;
    ICondition condition 	= null;
    TokenCmpOp op			= null;
    ConditionType type		= null;
    String value			= null;}
{    LOOKAHEAD(6) property = property()
    (
        LOOKAHEAD(2) (< EQ > | < NOTEQ >) { op = TokenCmpOp.parse(token.image); }
    		(< TRUE > | < FALSE >) 		{ value = token.image; type = ConditionType.BOOLEAN; }
    |   op = op() value = constant()	{ type = ConditionType.BASIC; }
    
    )
    	{ return new BaseCondition(false, type, property, op, value); }

|   property = property()
		{ return new BaseCondition(false, ConditionType.BOOLEAN, property, null, null); }

|   < NOT > condition = baseCondition()
		{ return new BaseCondition(true, condition.type(), condition.property(), condition.operator(), condition.value()); }
}

String word() :
{
}
{
    < WORD > { return token.image; }
}

String constant() :
{
    String value = null;
}
{
    LOOKAHEAD(2) < CONSTANT > { value = token.image; }
    	< DOT > < CONSTANT > 							{ return value + "." + token.image; }
    	
|   < CONSTANT > 										{ return token.image; }

|   ("'" | "\"" | "`" | "“")? value = word() ("'" | "\"" | "`" | "”")?	{ return value; }
}

Reference reference() :
{
}
{
    < WORD > { return new Reference(token.image); }
}

TokenCmpOp op() :
{}
{    (
        < GE >
    |   < LE >
    |   < GT >
    |   < LT >
    |   < EQ >
    |   < NOTEQ >
    )
    { return TokenCmpOp.parse(token.image); }
}Property property() :
{
    Reference ref = null;
    String name = null, value = null;
    TokenCmpOp op = null;
}
{
    ref = reference() < DOT > name = word()	{ return new Property(ref, name); }}

IExpr expr() :
{
    IExpr baseExpr 		= null;
    IExpr subExpr  		= null;
    IExpr whenExpr 		= null;
    IExpr elseExpr 		= null;
    TokenArithOp op 	= null;
    String value		= null;
    Property property 	= null;
    String maxminType	= null;}
{
    < LPARANS > baseExpr = expr() (< PLUS > | < MINUS > | < MULTIPLY > | < DIVIDE >) { op = TokenArithOp.parse(token.image); }         subExpr = expr() < RPARANS >
    { return new Expr(baseExpr, op, subExpr); }     
|   (
        LOOKAHEAD(3)property = property() { return new Expr(property); }
    |   value = constant() { return new Expr(Float.parseFloat(value)); }
    )
    |   (< MAX > | < MIN >) { maxminType = token.image; }
		< LPARANS > baseExpr = expr() < COMMA > subExpr = expr() < RPARANS >
	{ return new Expr(maxminType, baseExpr, subExpr); }
	
//TODO
//|   < CASE > < WHEN > condition() < THEN > expr()) < ELSE > expr()
}

AggExpr aggExpr() :
{
    AggType type 	= null;
    IExpr expr		= null;}
{
    (< SUM > | < MAX > | < MIN >) { type = AggType.parse(token.image); }
    	< LPARANS > expr = expr() < RPARANS >
    	{ return new AggExpr(type, expr); }    	|   < COUNT > < LPARANS > < RPARANS >
		{ return new AggExpr(AggType.COUNT, null); }}
RandomSpec randomspec() :
{
    String dataType = null;
    String low = null, high = null;}
{    < UNIFORM > (< INT > | < FLOAT >) { dataType = token.image; }
        < FROM > low = constant() < TO > high = constant() 		{ return new RandomSpec(dataType, low, high); }|   < IN > < LPARANS > constant() (":" constant())? (< COMMA > constant() (":" constant())?)* < RPARANS >
}

IQuery query() :
{
    IQuery query = null, subQuery = null;
}
{
    LOOKAHEAD(412421) query = baseQuery() < UNION > subQuery = query() { return new Query(query, subQuery); }
|   query = baseQuery() { return query; }
}

Constraint constraint() :
{
    String level		 = null;
    IQuery query 		 = null;
    ICondition condition = null;
}
{
    < FOR > < ALL > level = word() query = query() < ASSERT > condition = condition() { return new Constraint(level, query, condition); }
}


PropertyDef propertyDef() :
{    String level 			= null;
    Property property 		= null;
    String parent			= null;
    IExpr expr				= null;
    ICondition condition 	= null;
    IQuery query			= null;
    AggExpr aggExpr			= null;
    RandomSpec randomspec	= null;
}
{
    LOOKAHEAD(7) < DEFINE > level = word() property = property() < AS >
        (            (
                LOOKAHEAD(8) condition = condition()            |	expr = expr()
            )
            < IN > query = query()
            { return new PropertyDef(level, property, expr, condition, query); }
            
        |   < AGGREGATE > aggExpr = aggExpr() < IN > query = query()
        	{ return new PropertyDef(level, property, aggExpr, query); }
        			|   < RANDOM > randomspec = randomspec() < WHERE > condition = condition()
			{ return new PropertyDef(level, property, randomspec, condition); }
        )
        
|   < INHERIT > level = word() property = property() < FROM > parent = word()
			{ return new PropertyDef(level, property, parent); }}

IStatement parse() :
{
    IStatement s = null;
}
{    s = query()			{ return s; }|   s = constraint()	{ return s; }
|   s = propertyDef()	{ return s; }
}
