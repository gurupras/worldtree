/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(Parser)package internal.parser;

import internal.containers.*;
import internal.containers.pattern.*;
import internal.containers.condition.*;

public class Parser{}PARSER_END(Parser)SKIP :{    " "|   "\r"|   "\t"|   "\n"}
TOKEN [IGNORE_CASE] : /* KEYWORDS */
{    < FOR		: "FOR" >
|   < ALL		: "ALL" >
|   < ASSERT	: "ASSERT" >
|   < WHERE		: "WHERE" >
|   < UNION		: "UNION" >
|   < AND		: "AND" >
|   < OR		: "OR" >
|   < NOT		: "NOT" >
|   < DEFINE	: "DEFINE" >
|   < AS		: "AS" >
|   < IN		: "IN" >
|   < WORD		: [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_"])* >
|   < CONSTANT 	: (< DIGIT >)+ >
|   < #DIGIT 	: [ "0"-"9" ] >
|   < COMMA		: "," >
|   < PLUS 		: "+" >
|   < MINUS 	: "-" >
|   < MULTIPLY	: "*" >
|   < EQUALS	: "=" >
|   < DIVIDE 	: "/" >
|   < LPARANS	: "(" >
|   < RPARANS	: ")" >
}

Pattern pattern() :
{}
{
    LOOKAHEAD(4) reference() relation() reference() (< COMMA > pattern())*
    {        return null;
    }}

Query query() :
{
    Pattern pattern = null;
    ICondition condition = null;
}
{
    pattern = pattern() < WHERE > condition = condition() (< UNION > query())?    {        return new Query(pattern, condition);    }    
}

Relation relation() :
{
    Relation relation = null;
    String name = null, regex = null;
}
{
    LOOKAHEAD(2) name = word() < MULTIPLY >    {        regex = token.image;
        return new Relation(name, regex);
    }
|   LOOKAHEAD(2) name = word() < PLUS >
    {
        regex = token.image;
        return new Relation(name, regex);
    }
|   < LPARANS > relation = relation() < RPARANS >    {        return relation;    }
}

ICondition condition() :
{
    Property property = null;
    Boolean not = null;
    ICondition condition = null, subCondition = null;
}
{
    property = property()    {        return new BaseCondition(false, property);    }    
|   < NOT > condition = condition()    {        not = true;
        return new BaseCondition(not, condition.property());
    }
        
|   < LPARANS > condition = condition() (< AND > | < OR >) subCondition = condition() < RPARANS >    {        return new Condition(condition, subCondition);    }
}

String word() :
{
}
{
    < WORD > { return token.image; }
}

String constant() :
{
    Token integer = null, decimal = null;
}
{
    LOOKAHEAD(2) < CONSTANT >    {        integer = token;
        return integer.image;    }
|   < CONSTANT >
    {
        integer = token;
    }
    "." < CONSTANT >
    {
        decimal = token;
        return integer.image + "." + decimal.image;
    }
}

Reference reference() :
{
}
{
    < WORD > { return new Reference(token.image); }
}

Property property() :
{
    Reference ref = null;
    String name = null, value = null;
}
{
    ref = reference() "." name = word() < EQUALS > value = constant()
    {        return new Property(ref, name, value);    }    
}

IContainer parse() :
{
    IContainer o = null;
}
{
    LOOKAHEAD(2) o = query()	{ return o; }
|   LOOKAHEAD(2) o = pattern() 	{ return o; }
|   LOOKAHEAD(3) o = relation()	{ return o; }
|   o = condition()				{ return o; }
}
