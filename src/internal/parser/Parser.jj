/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(Parser)package internal.parser;

public class Parser{}PARSER_END(Parser)SKIP :{    " "|   "\r"|   "\t"|   "\n"}
TOKEN [IGNORE_CASE] : /* KEYWORDS */
{    < FOR		: "FOR" >
|   < ALL		: "ALL" >
|   < ASSERT	: "ASSERT" >
|   < WHERE		: "WHERE" >
|   < UNION		: "UNION" >
|   < AND		: "AND" >
|   < OR		: "OR" >
|   < NOT		: "NOT" >
|   < DEFINE	: "DEFINE" >
|   < AS		: "AS" >
|   < IN		: "IN" >
|   < CONSTANT 	: (< DIGIT >)+ >
|   < #DIGIT 	: [ "0"-"9" ] >
|   < WORD		: [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_"])+ >
|   < COMMA		: "," >
|   < PLUS 		: "+" >
|   < MINUS 	: "-" >
|   < MULTIPLY	: "*" >
|   < EQUALS	: "=" >
|   < DIVIDE 	: "/" >
|   < LPARANS	: "(" >
|   < RPARANS	: ")" >
}

void pattern() :
{}
{
    LOOKAHEAD(4) reference() relation() reference() (< COMMA > pattern())*}

void query() :
{
}
{
    pattern() < WHERE > condition() (< UNION > query())?
}

void relation() :
{
}
{
    word() (< MULTIPLY > | < PLUS >)?
|   < LPARANS > relation() < RPARANS > 
}

void condition() :
{
}
{
    property()
|   < NOT > condition()
|   < LPARANS > condition() (< AND > | < OR >) condition() < RPARANS >
}

String word() :
{
}
{
    < WORD > { return token.image; }
}

double constant() :
{
    Token integer = null, decimal = null;
}
{
    LOOKAHEAD(2) < CONSTANT >    {        integer = token;    }    "." < CONSTANT >
    {        decimal = token;
        return Double.parseDouble(integer.image + "." + token.image);
    }
|   < CONSTANT >    {        integer = token;
        return Double.parseDouble(integer.image);    }
}

Reference reference() :
{
}
{
    < WORD > { return new Reference(token.image); }
}

String property() :
{
}
{
    word() { return token.image; }
}