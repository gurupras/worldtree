/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(Parser)package internal.parser;

import internal.containers.*;
import internal.containers.pattern.*;
import internal.containers.condition.*;
import internal.containers.query.*;
import internal.containers.property.*;

public class Parser{}PARSER_END(Parser)SKIP :{    " "|   "\r"|   "\t"|   "\n"
|   ";"}
TOKEN [IGNORE_CASE] : /* KEYWORDS */
{    < FOR		: "FOR" >
|   < ALL		: "ALL" >
|   < AGGREGATE	: "AGGREGATE" >
|   < ASSERT	: "ASSERT" >
|   < AT		: "AT" >
|   < WHERE		: "WHERE" >
|   < UNION		: "UNION" >
|   < AND		: "AND" >
|   < OR		: "OR" >
|   < NOT		: "NOT" >
|   < DEFINE	: "DEFINE" >
|   < AS		: "AS" >
|   < IN		: "IN" >
|   < WORD		: [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_"])* >
|   < CONSTANT 	: (< DIGIT >)+ >
|   < #DIGIT 	: [ "0"-"9" ] >
|   < COMMA		: "," >
|   < PLUS 		: "+" >
|   < MINUS 	: "-" >
|   < MULTIPLY	: "*" >
|   < EQUALS	: "=" >
|   < DIVIDE 	: "/" >
|   < LPARANS	: "(" >
|   < RPARANS	: ")" >
|   < DOT		: "." >
}

IPattern pattern() :
{
    IPattern pattern = null, subPattern = null;}
{
    LOOKAHEAD(412421) pattern = basePattern() < COMMA > subPattern = pattern() { return new Pattern(pattern, subPattern); }
|   pattern = basePattern() { return pattern; }}

BasePattern basePattern() :
{
    Reference r1 = null, r2 = null;
    Relation relation = null;}
{    r1 = reference() relation = relation() r2 = reference() { return new BasePattern(r1, relation, r2); }
}

IQuery query() :
{
    IQuery query = null, subQuery = null;
}
{
    LOOKAHEAD(412421) query = baseQuery() (< UNION > subQuery = query())? { return new Query(query, subQuery); }
|   query = baseQuery() { return query; }
}

BaseQuery baseQuery() :
{
    String level = null;
    IPattern pattern = null;
    ICondition condition = null;
}
{    < AT > level = word() pattern = pattern() (< WHERE > condition = condition())? { return new BaseQuery(level, pattern, condition); }}

Relation relation() :
{
    Relation relation = null;
    String name = null, regex = null;
}
{
    LOOKAHEAD(2) name = word() < MULTIPLY >    {        regex = token.image;
        return new Relation(name, regex);
    }
|   LOOKAHEAD(2) name = word() < PLUS >
    {
        regex = token.image;
        return new Relation(name, regex);
    }
|   < LPARANS > relation = relation() < RPARANS > { return relation; }
|   name = word() { return new Relation(name, null); }
}

ICondition condition() :
{
    Property property = null;
    UnionType unionType = null;
    ICondition condition = null, subCondition = null;
}
{
    LOOKAHEAD(5) property = property()  { condition = new BaseCondition(false, property); }
    (< AND > | < OR >) 					{ unionType = UnionType.getType(token.image); }
    subCondition = condition()			{ return new Condition(condition, unionType, subCondition); }
    
|   property = property() 				{ return new BaseCondition(false, property); }

|   < NOT > condition = condition()		{ return new BaseCondition(true, condition.property()); }

|   < LPARANS > condition = condition() < RPARANS >	{ return condition; }
}

String word() :
{
}
{
    < WORD > { return token.image; }
}

String constant() :
{
    Token integer = null, decimal = null;
}
{
    LOOKAHEAD(2) < CONSTANT >    {        integer = token;
        return integer.image;    }
|   < CONSTANT >
    {
        integer = token;
    }
    < DOT > < CONSTANT >
    {
        decimal = token;
        return integer.image + "." + decimal.image;
    }
}

Reference reference() :
{
}
{
    < WORD > { return new Reference(token.image); }
}

Property property() :
{
    Reference ref = null;
    String name = null, value = null;
}
{
    LOOKAHEAD(4) ref = reference() < DOT > name = word() < EQUALS > value = constant()
    {
        return new Property(ref, name, value);
    }
|   ref = reference() < DOT > name = word()    {
        return new Property(ref, name, "1");    }}

Constraint constraint() :
{    IQuery query = null;
    ICondition condition = null;
}
{    < FOR > < ALL > query = query() < ASSERT > condition = condition() { return new Constraint(query, condition); }
}

PropertyDef propertyDef() :
{    String level 		= null;
    Reference ref 		= null;
    String property 	= null;
    ICondition condition = null;
    IQuery query			= null;
}
{
    LOOKAHEAD(7) < DEFINE > level = word() ref = reference() < DOT > property = word() < AS > < AGGREGATE >
    	condition = condition() < IN > query = query() { return new PropertyDef(level, ref, property, condition, query); }
|   < DEFINE > level = word() ref = reference() < DOT > property = word() < AS >
    	condition = condition() < IN > query = query() { return new PropertyDef(level, ref, property, condition, query); }
 }

IStatement parse() :
{
    IStatement s = null;
}
{    s = query()			{ return s; }|   s = constraint()	{ return s; }
|   s = propertyDef()	{ return s; }
}
